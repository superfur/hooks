"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[863],{3271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=n(4848),o=n(8453);const s={sidebar_position:3},r="useClippy",l={id:"hooks/useClippy",title:"useClippy",description:"useClippy is a Hook for interacting with the clipboard, supporting React, Vue, and Solid frameworks.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/hooks/useClippy.md",sourceDirName:"hooks",slug:"/hooks/useClippy",permalink:"/hooks/en/hooks/useClippy",draft:!1,unlisted:!1,editUrl:"https://github.com/superfur/hooks/edit/main/website/docs/hooks/useClippy.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"hooksSidebar",previous:{title:"useLocalStorage",permalink:"/hooks/en/hooks/useLocalStorage"},next:{title:"useOnlineStatus",permalink:"/hooks/en/hooks/useOnlineStatus"}},c={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"React",id:"react",level:3},{value:"Vue",id:"vue",level:3},{value:"Solid",id:"solid",level:3},{value:"API",id:"api",level:2},{value:"Return Values",id:"return-values",level:3},{value:"Browser Compatibility",id:"browser-compatibility",level:3}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"useclippy",children:"useClippy"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"useClippy"})," is a Hook for interacting with the clipboard, supporting React, Vue, and Solid frameworks."]}),"\n",(0,i.jsx)(t.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(t.h3,{id:"react",children:"React"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { useClippy } from '@septem/hooks/react';\n\nfunction ClippyDemo() {\n  const [clipboard, setClipboard] = useClippy();\n  \n  return (\n    <div>\n      <p>Current clipboard content: {clipboard}</p>\n      <button onClick={() => setClipboard('Text copied to clipboard')}>Copy text</button>\n      <input \n        value={clipboard} \n        onChange={(e) => setClipboard(e.target.value)} \n        placeholder=\"Enter text to copy\"\n      />\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"vue",children:"Vue"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-vue",children:'<script setup>\nimport { useClippy } from \'@septem/hooks/vue\';\n\nconst [clipboard, setClipboard] = useClippy();\n<\/script>\n\n<template>\n  <div>\n    <p>Current clipboard content: {{ clipboard }}</p>\n    <button @click="setClipboard(\'Text copied to clipboard\')">Copy text</button>\n    <input \n      v-model="clipboard.value" \n      @input="setClipboard(clipboard.value)" \n      placeholder="Enter text to copy"\n    />\n  </div>\n</template>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"solid",children:"Solid"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { useClippy } from '@septem/hooks/solid';\n\nfunction ClippyDemo() {\n  const [clipboard, setClipboard] = useClippy();\n  \n  return (\n    <div>\n      <p>Current clipboard content: {clipboard()}</p>\n      <button onClick={() => setClipboard('Text copied to clipboard')}>Copy text</button>\n      <input \n        value={clipboard()} \n        onInput={(e) => setClipboard(e.target.value)} \n        placeholder=\"Enter text to copy\"\n      />\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"const [clipboard, setClipboard] = useClippy();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"return-values",children:"Return Values"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Return Value"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Type"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"clipboard"}),(0,i.jsx)(t.td,{children:"Current clipboard content"}),(0,i.jsx)(t.td,{children:"Framework-specific state value"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"setClipboard"}),(0,i.jsx)(t.td,{children:"Function to update clipboard"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"(value: string) => void"})})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"browser-compatibility",children:"Browser Compatibility"}),"\n",(0,i.jsxs)(t.p,{children:["This hook uses the Clipboard API, which is supported in most modern browsers. For older browsers, it falls back to using ",(0,i.jsx)(t.code,{children:"document.execCommand('copy')"})," when possible."]})]})}function a(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);